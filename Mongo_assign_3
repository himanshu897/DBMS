show dbs
Assignment  144.00 KiB
admin        40.00 KiB
book        204.00 KiB
config       72.00 KiB
local        80.00 KiB

test> use Assignment
switched to db Assignment

Assignment> show collections
student
students

Assignment> db.createCollection('studentdata')
{ ok: 1 }
Assignment> db.studentdata.insertOne({"name":"Ram","marks":50,"age":20})
{
  acknowledged: true,
  insertedId: ObjectId("634aecbb3f64334b14a2f5f8")
}
Assignment> db.studentdata.insertOne({"name":"Raman","marks":70,"age":20})
{
  acknowledged: true,
  insertedId: ObjectId("634aecc83f64334b14a2f5f9")
}
Assignment> db.studentdata.insertOne({"name":"Aman","marks":80,"age":22})
{
  acknowledged: true,
  insertedId: ObjectId("634aecd53f64334b14a2f5fa")
}
Assignment> db.studentdata.insertOne({"name":"praveen","marks":85,"age":23})
{
  acknowledged: true,
  insertedId: ObjectId("634aece63f64334b14a2f5fb")
}
Assignment> db.studentdata.insertOne({"name":"Ashutosh","marks":90,"age":25})
{
  acknowledged: true,
  insertedId: ObjectId("634aecf63f64334b14a2f5fc")
}
Assignment> db.studentdata.find()
[
  {
    _id: ObjectId("634aecbb3f64334b14a2f5f8"),
    name: 'Ram',
    marks: 50,
    age: 20
  },
  {
    _id: ObjectId("634aecc83f64334b14a2f5f9"),
    name: 'Raman',
    marks: 70,
    age: 20
  },
  {
    _id: ObjectId("634aecd53f64334b14a2f5fa"),
    name: 'Aman',
    marks: 80,
    age: 22
  },
  {
    _id: ObjectId("634aece63f64334b14a2f5fb"),
    name: 'praveen',
    marks: 85,
    age: 23
  },
  {
    _id: ObjectId("634aecf63f64334b14a2f5fc"),
    name: 'Ashutosh',
    marks: 90,
    age: 25
  }
]

---------------------------------------------------------------------------------------------------------------------------------------
map-reduce is a data processing programming model that helps to perform operations on large data sets and produce aggregated results. 
MongoDB provides the mapReduce() function to perform the map-reduce operations

This function has two main functions, i.e., map function and reduce function. 
The map function is used to group all the data based on the key-value and the reduce function is used to perform operations on the mapped data.

Syntax: 

db.collectionName.mapReduce(
... map(),
...reduce(),
...query{},
...output{}
);


1. map() function: It uses emit() function in which it takes two parameters key and value key. 
Here the key is on which we make groups like groups by in MySQL. Example like group by ages or names and 
the second parameter is on which aggregation is performed like avg(), sum() is calculated on.
2. reduce() function: It is the step in which we perform our aggregate function  like avg(), sum().
3. query: Here we will pass the query to filter the resultset.
4. output: In this, we will specify the collection name where the result will be stored.

-----------------------------------------------------------------------------------------------------------------------------------------------------


Assignment> //calculate the sum of marks of all the student

Assignment> var map=function(){emit(this.age,this.marks)}
Assignment> var reduce=function(age,marks){return Array.sum(marks)}
Assignment> db.studentdata.mapReduce(map,reduce,{'out':'result1'})


{ result: 'result1', ok: 1 }

Assignment> db.result1.find()
[
  { _id: 23, value: 85 },
  { _id: 20, value: 120 },
  { _id: 25, value: 90 },
  { _id: 22, value: 80 }
]



--------------------------------------------------------------------------

// for finding the average marks of all students

Assignment> var map=function(){emit(this.age,this.marks)};
Assignment> var reduce=function(age,marks){return Array.avg(marks)};
Assignment> db.studentdata.mapReduce(map,reduce,{query:{age:{$gt:20}},out:'result2'})

{ result: 'result2', ok: 1 }
Assignment> db.result2.find()
[
  { _id: 22, value: 80 },
  { _id: 23, value: 85 },
  { _id: 25, value: 90 }
]
